{"version":3,"sources":["birds1.png","components/ListItem.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","useState","clicked","setClicked","onDoubleClick","onChecked","id","onClick","style","textDecoration","text","App","inputText","setInputText","items","insertNewItem","deleteItem","prevItems","filter","index","className","src","birds","alt","onChange","event","newInput","target","value","type","map","item","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,oC,8KCiB5BC,MAff,SAAmBC,GAAO,IAAD,EAESC,oBAAU,GAFnB,mBAEdC,EAFc,KAELC,EAFK,KAQrB,OACI,wBAAIC,cAAe,WACfJ,EAAMK,UAAUL,EAAMM,KACvBC,QAPP,WACIJ,GAAYD,IAMWM,MAAO,CAACC,eAAgBP,EAAU,eAAiB,SAAUF,EAAMU,O,gBCsCnFC,MA9Cf,WAAgB,IAAD,EACqBV,mBAAS,IAD9B,mBACNW,EADM,KACKC,EADL,OAEkBZ,mBAAS,IAF3B,mBAENa,EAFM,KAECC,EAFD,KAgBb,SAASC,EAAWV,GAClBS,GAAc,SAAAE,GACZ,OAAOA,EAAUC,QAAO,SAACJ,EAAOK,GAC9B,OAAOA,IAAUb,QAMvB,OACE,yBAAKc,UAAU,OACb,yBAAKd,GAAG,MAAMe,IAAKC,IAAOC,IAAI,UAC9B,yBAAKH,UAAU,cACb,2CAEF,yBAAKd,GAAG,aACN,2BAAOA,GAAG,QAAQkB,SA5BxB,SAAsBC,GACpB,IAAMC,EAAWD,EAAME,OAAOC,MAC9Bf,EAAaa,IA0BiCE,MAAOhB,EAAWiB,KAAK,SACjE,4BAAQvB,GAAG,YAAYC,QAxB7B,WACEQ,GAAc,SAAAE,GACZ,MAAM,GAAN,mBAAWA,GAAX,CAAsBL,OAExBC,EAAa,MAoBT,QAEF,yBAAKP,GAAG,QACN,4BACGQ,EAAMgB,KAAI,SAACC,EAAMZ,GAAP,OACT,kBAAC,EAAD,CAAUa,IAAKb,EAAOb,GAAIa,EAAOT,KAAMqB,EAAM1B,UAAWW,WC/BhDiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.979dfd12.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/birds1.b9bb9f46.png\";","import React, { useState } from 'react';\r\n\r\nfunction ListItem (props){\r\n\r\n    const [clicked, setClicked] = useState (false);\r\n\r\n    function isClicked() {\r\n        setClicked(!clicked);\r\n    }\r\n\r\n    return (\r\n        <li onDoubleClick={() => {\r\n            props.onChecked(props.id);\r\n        }} onClick={isClicked} style={{textDecoration: clicked ? \"line-through\" : \"none\"}}>{props.text}</li>\r\n    );\r\n}\r\n\r\nexport default ListItem;","import React, { useState } from 'react';\nimport './App.css';\nimport ListItem from './components/ListItem'\nimport birds from './birds1.png'\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [items, insertNewItem] = useState([]);\n\n  function newInputText(event) {\n    const newInput = event.target.value;\n    setInputText(newInput);\n  }\n\n  function setNewItem() {\n    insertNewItem(prevItems => {\n      return [...prevItems, inputText]\n    });\n    setInputText(\"\");\n  }\n\n  function deleteItem(id) {\n    insertNewItem(prevItems => {\n      return prevItems.filter((items, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n\n  return (\n    <div className=\"App\">\n      <img id=\"img\" src={birds} alt=\"birds\" />\n      <div className=\"App-header\">\n        <h1>To-do List</h1>\n      </div>\n      <div id=\"inputText\">\n        <input id=\"input\" onChange={newInputText} value={inputText} type=\"text\" />\n        <button id=\"addButton\" onClick={setNewItem}>Add</button>\n      </div>\n      <div id=\"list\">\n        <ul>\n          {items.map((item, index) => (\n            <ListItem key={index} id={index} text={item} onChecked={deleteItem} />))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}